plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

group = 'com.ers'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    dependsOn test
}

sonar {
    properties {
        property "sonar.projectKey", "ers-backend-project"
        property "sonar.projectName", "ERS Backend"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", System.getenv('SONAR_TOKEN')
        property "sonar.gradle.skipCompile", "true"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.libraries", configurations.runtimeClasspath.files.collect { it.absolutePath }.join(',')
        property "sonar.java.test.libraries", configurations.testRuntimeClasspath.files.collect { it.absolutePath }.join(',')
        property "sonar.qualitygate.wait", true
        property "sonar.junit.reportPaths", "build/test-results/test"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.7.0'
    implementation 'com.cloudinary:cloudinary-http44:1.36.0'
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    finalizedBy jacocoTestReport
}

tasks.named('sonar') {
    dependsOn test
    dependsOn jacocoTestReport
}
